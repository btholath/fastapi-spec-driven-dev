{"name": "test_create_annuity_happy_path", "status": "broken", "statusDetails": {"message": "socket.gaierror: [Errno -2] Name or service not known", "trace": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x713410981c10>\n\n    @pytest.mark.asyncio\n    async def test_create_annuity_happy_path(monkeypatch):\n        # Mock get_current_user\n        async def mock_get_current_user(token: str):\n            return {\"id\": 123, \"role\": \"user\"}\n        monkeypatch.setattr(\"app.dependencies.get_current_user\", mock_get_current_user)\n    \n        # Mock calculate_premium\n        def mock_calculate_premium(principal: float, term_years: int, annual_rate: float) -> float:\n            return 2124.60\n        monkeypatch.setattr(\"app.services.annuity.calculate_premium\", mock_calculate_premium)\n    \n        # Mock SQLAlchemy engine, session, and metadata\n        mock_engine = MagicMock(spec=create_async_engine)\n        mock_sessionmaker = MagicMock(spec=async_sessionmaker)\n        mock_session = AsyncMock(spec=AsyncSession)\n        mock_session.add = AsyncMock()\n        mock_session.commit = AsyncMock()\n        mock_session.refresh = AsyncMock()\n        mock_sessionmaker.return_value.__aenter__.return_value = mock_session\n        monkeypatch.setattr(\"app.dependencies.get_engine\", MagicMock(return_value=mock_engine))\n        monkeypatch.setattr(\"app.dependencies.async_sessionmaker\", MagicMock(return_value=mock_sessionmaker))\n        mock_metadata = MagicMock()\n        mock_metadata.create_all = MagicMock()\n        mock_metadata.drop_all = MagicMock()\n        monkeypatch.setattr(\"app.models.annuity.Base\", MagicMock(metadata=mock_metadata))\n    \n        # Mock Annuity object\n        mock_annuity = MagicMock(spec=Annuity)\n        mock_annuity.id = 1\n        mock_annuity.principal = 10000.0\n        mock_annuity.term_years = 5\n        mock_annuity.annual_rate = 3.0\n        mock_annuity.premium = 2124.60\n        mock_session.add.side_effect = lambda x: setattr(x, \"id\", 1)\n        mock_session.refresh.side_effect = lambda x: x\n        monkeypatch.setattr(\"app.models.annuity.Annuity\", MagicMock(return_value=mock_annuity))\n    \n        client = TestClient(app)\n>       response = client.post(\n            \"/annuities/premium\",\n            json={\"principal\": 10000, \"term_years\": 5, \"annual_rate\": 3},\n            headers={\"Authorization\": \"Bearer fake-token\"}\n        )\n\ntests/unit/test_annuity.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/starlette/testclient.py:597: in post\n    return super().post(\n.venv/lib/python3.12/site-packages/httpx/_client.py:1157: in post\n    return self.request(\n.venv/lib/python3.12/site-packages/starlette/testclient.py:488: in request\n    return super().request(\n.venv/lib/python3.12/site-packages/httpx/_client.py:837: in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n.venv/lib/python3.12/site-packages/httpx/_client.py:926: in send\n    response = self._send_handling_auth(\n.venv/lib/python3.12/site-packages/httpx/_client.py:954: in _send_handling_auth\n    response = self._send_handling_redirects(\n.venv/lib/python3.12/site-packages/httpx/_client.py:991: in _send_handling_redirects\n    response = self._send_single_request(request)\n.venv/lib/python3.12/site-packages/httpx/_client.py:1027: in _send_single_request\n    response = transport.handle_request(request)\n.venv/lib/python3.12/site-packages/starlette/testclient.py:381: in handle_request\n    raise exc\n.venv/lib/python3.12/site-packages/starlette/testclient.py:378: in handle_request\n    portal.call(self.app, scope, receive, send)\n.venv/lib/python3.12/site-packages/anyio/from_thread.py:291: in call\n    return cast(T_Retval, self.start_task_soon(func, *args).result())\n/home/codespace/.python/current/lib/python3.12/concurrent/futures/_base.py:456: in result\n    return self.__get_result()\n/home/codespace/.python/current/lib/python3.12/concurrent/futures/_base.py:401: in __get_result\n    raise self._exception\n.venv/lib/python3.12/site-packages/anyio/from_thread.py:222: in _call_func\n    retval = await retval_or_awaitable\n.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__\n    await super().__call__(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__\n    await self.middleware_stack(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__\n    raise exc\n.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__\n    await self.app(scope, receive, _send)\n.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:62: in wrapped_app\n    raise exc\n.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:51: in wrapped_app\n    await app(scope, receive, sender)\n.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__\n    await self.middleware_stack(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app\n    await route.handle(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle\n    await self.app(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:62: in wrapped_app\n    raise exc\n.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:51: in wrapped_app\n    await app(scope, receive, sender)\n.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app\n    response = await f(request)\n.venv/lib/python3.12/site-packages/fastapi/routing.py:301: in app\n    raw_response = await run_endpoint_function(\n.venv/lib/python3.12/site-packages/fastapi/routing.py:212: in run_endpoint_function\n    return await dependant.call(**values)\napp/main.py:25: in create_annuity\n    await session.commit()\n.venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1009: in commit\n    await greenlet_spawn(self.sync_session.commit)\n.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:201: in greenlet_spawn\n    result = context.throw(*sys.exc_info())\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:60: in save_obj\n    for (\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:223: in _organize_states_for_save\n    for state, dict_, mapper, connection in _connections_for_states(\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1753: in _connections_for_states\n    connection = uowtransaction.transaction.connection(base_mapper)\n<string>:2: in connection\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1039: in connection\n    return self._connection_for_bind(bind, execution_options)\n<string>:2: in _connection_for_bind\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1175: in _connection_for_bind\n    conn = self._parent._connection_for_bind(\n<string>:2: in _connection_for_bind\n    ???\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1189: in _connection_for_bind\n    conn = bind.connect()\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3278: in connect\n    return self._connection_cls(self)\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:146: in __init__\n    self._dbapi_connection = engine.raw_connection()\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3302: in raw_connection\n    return self.pool.connect()\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:449: in connect\n    return _ConnectionFairy._checkout(self)\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1263: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:712: in checkout\n    rec = pool._do_get()\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:179: in _do_get\n    with util.safe_reraise():\n.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177: in _do_get\n    return self._create_connection()\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:390: in _create_connection\n    return _ConnectionRecord(self)\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:674: in __init__\n    self.__connect()\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:900: in __connect\n    with util.safe_reraise():\n.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:896: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:643: in connect\n    return dialect.connect(*cargs, **cparams)\n.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:621: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)\n.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:953: in connect\n    await_only(creator_fn(*arg, **kw)),\n.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only\n    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501\n.venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn\n    value = await result\n.venv/lib/python3.12/site-packages/asyncpg/connection.py:2329: in connect\n    return await connect_utils._connect(\n.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py:1017: in _connect\n    raise last_error or exceptions.TargetServerAttributeNotMatched(\n.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py:991: in _connect\n    conn = await _connect_addr(\n.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py:828: in _connect_addr\n    return await __connect_addr(params, True, *args)\n.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py:873: in __connect_addr\n    tr, pr = await connector\n.venv/lib/python3.12/site-packages/asyncpg/connect_utils.py:744: in _create_ssl_connection\n    tr, pr = await loop.create_connection(\n/home/codespace/.python/current/lib/python3.12/asyncio/base_events.py:1077: in create_connection\n    infos = await self._ensure_resolved(\n/home/codespace/.python/current/lib/python3.12/asyncio/base_events.py:1453: in _ensure_resolved\n    return await loop.getaddrinfo(host, port, family=family, type=type,\n/home/codespace/.python/current/lib/python3.12/asyncio/base_events.py:898: in getaddrinfo\n    return await self.run_in_executor(\n/home/codespace/.python/current/lib/python3.12/concurrent/futures/thread.py:58: in run\n    result = self.fn(*self.args, **self.kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'db', port = 5432, family = 0, type = <SocketKind.SOCK_STREAM: 1>, proto = 0, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/home/codespace/.python/current/lib/python3.12/socket.py:963: gaierror"}, "start": 1756245514429, "stop": 1756245514492, "uuid": "e8593b2e-e762-4dd6-9b49-18986672e789", "historyId": "81a6ffda3b51b5af17770efb8efc3790", "testCaseId": "81a6ffda3b51b5af17770efb8efc3790", "fullName": "tests.unit.test_annuity#test_create_annuity_happy_path", "labels": [{"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "tests.unit"}, {"name": "suite", "value": "test_annuity"}, {"name": "host", "value": "codespaces-b9a98c"}, {"name": "thread", "value": "10207-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.unit.test_annuity"}], "titlePath": ["tests", "unit", "test_annuity.py"]}